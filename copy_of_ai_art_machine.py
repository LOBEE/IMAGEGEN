# -*- coding: utf-8 -*-
"""Copy of AI Art Machine

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yHTJVDh7RaUN3NS6k-3v3ccTkNkjc2jf

# ART MACHINE: Put in text, get AI art.

This notebook is by Hillel Wayne ([website](https://www.hillelwayne.com/), [twitter](https://twitter.com/hillelogram)). It's based on [this notebook](https://colab.research.google.com/drive/15UwYDsnNeldJFHJ9NdgYBYeo6xPmSelP) by Katherine Crowson ([github](https://github.com/crowsonkb), [twitter](https://twitter.com/RiversHaveWings)), simplified to make it more accessible to nonprogrammers. The original technique was discovered by https://twitter.com/advadnoun.

If you want to learn more about AI-generated art, [this](https://ml.berkeley.edu/blog/posts/clip-art/) is a great introduction. It lists other generators at the end.

Want to share this? Short url is https://is.gd/artmachine

**Licensing:** Anything you make with the art machine is yours to do whatever you want with it. (Disclaimer: I Am Not A Lawyer)
"""

# @title Licensed under the MIT License

# Copyright (c) 2021 Katherine Crowson

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

"""

## How to use

(You need to be logged into a Google account for this to work)

1. Set your prompt [here](#scrollTo=TnMw4FrN6JeB).
2. In the menu bar on the top of the webpage, go to "Runtime", then "Run All". The first run will take a while to start because the notebook will need to download some important files. *Note*: if you're on mobile, you can find the "run all" button in the sandwich menu.
3. Images will appear [here](#scrollTo=oxRlmwZ9As3X).
4. If you want to download the results, go [here](#scrollTo=2JR7TTOIcBr7) when it's done.
5. For future runs, use "Restart and Run All" instead of "Run All". Runs after the first will be MUCH faster to start.

#### Prompt Ideas

Here are some things that worked for me:

* Simple scenes: "A cabin by the lake", "sunset over mountains"
* Things that aren't visual: "Dubstep", "Sad"
* Media with distinct visuals: "Homestar Runner", "Factorio"
* Something poetic: "old gods and older machines", "a doorway into a place without sunlight"

Here are some that other people have made that I really like: [Robot Birthday](https://twitter.com/thristhart/status/1422734774884397056), [the eerie bliss and torture of solitude](https://twitter.com/dynamic_proxy/status/1423034901264310273), [voxel utopia in cyclades greece](https://twitter.com/_TheodoreM_/status/1422727156820545538), and [ghost chasing the life out of a planet](https://twitter.com/SnoPhort/status/1422721217564266497).

**Flavors**: There are two "flavors" of art generator: "default" and "cumin". They have different aesthetics and produce different kinds of art for the same prompt. If you don't like what you get from one, try the other!

**Keywords**: You can put style keywords onto the end of your prompt to get different results.

Some keywords that work well are "studio ghibli", "trending on artstation", "rendered in unreal engine", "drawn really good", "chibi", and "watercolor". Experiment!

**Style Images**: Under advanced options is `style_url`. If you put a link to an image here, it will try to generate an image with the same style. For example, if you put [this](https://upload.wikimedia.org/wikipedia/commons/a/a4/Piet_Mondriaan%2C_1930_-_Mondrian_Composition_II_in_Red%2C_Blue%2C_and_Yellow.jpg) url in the bar, the prompt will look more like a Piet Mondrian composition. 

**Multiple Prompts**: If you separate prompts with a pipe (`|`), the art machine will try them all simultaneously. For example, `bat man` will be similar to the superhero, while `bat | man` will get you something closer to a cross between a bat and a man.

   When using multiple prompts, you can "weight" them by putting `:n` after the prompt. For example, `bat | man:3` will tell the art machine to focus 3 times as hard on `man` than on `bat`."""

#@title Instance Size { vertical-output: true, display-mode: "form" }
if "MiB / 15" in x[9]:
  print("Google gave you a big instance! Image size can go up to 700!")
else:
  print("Google gave you a small instance. Image size can go up to 400.")

# TODO add a test here

#@title Parameters { run: "auto", display-mode: "form" }
#@markdown ### Basic options:
#@markdown ↓ The prompt to you want to try.

p = "lamborghini huracan sto" #@param {type:"string"}

#@markdown ↓ How big you want the image to be. This can be up to 700, but if it's smaller, your images will appear *much* faster.
image_size =   400#@param {type:"integer"}

#@markdown ↓ If checked, will automatically bundle and download the images when the engine is done.

download_after_finishing = True #@param {type:"boolean"}

#@markdown ---

#@markdown ### Advanced Options
#@markdown *You don't need to change any of these things, but you can if you want.*



#@markdown ↓ How many steps you want the generator to run. Best between 400 and 1000 for default weirdness. 

total_steps = 400 #@param {type:"integer"}

#@markdown ↓ How many steps you want between images. Use a lower number if you want to make videos.

steps_per_image = 50 #@param {type:"integer"}

#@markdown ↓ Different flavors give you very different art for the same prompt.

flavor = 'thyme' #@param ["cumin", "rosewater", "oregano", "thyme"]

#@markdown ↓ If nonempty, the generator will try to mimick the style of the image. Should be a url. Leave empty if you just want a prompt.

style_url = "" #@param {type:"string"}
#@markdown ↓ How fast and sloppy the AI should be. 2 is a good balance.

weirdness = 2 #@param {type:"slider", min:1, max:11, step:1}
#@markdown ↓ Changing this number will give you slightly different results for the same prompt.
seed = 1 #@param {type:"integer"}

#@title low-level config you don't need to worry about { display-mode: "form" }
#@markdown You can click "show code" if you want to mess with it, but you shouldn't need to.

# TODO why is this even argparse this makes no sense!
import argparse
args = argparse.Namespace(
    prompts=p.split("|"),
    image_prompts=[],
    noise_prompt_seeds=[],
    noise_prompt_weights=[],
    tv_weight=0.1,
    step_size=0.05*(weirdness if weirdness != 11 else 22),
    weight_decay=0.,
    cutn=64,
    cut_pow=1.,
    display_freq=steps_per_image,
    total_iterations=total_steps,
    seed=seed,
)

if style_url:
  args.image_prompts = [style_url]

# Commented out IPython magic to ensure Python compatibility.
# #@title A bunch of setup stuff { display-mode: "form" }
# #@markdown This will run *much* faster on the second time.
# %%capture
# %%bash
# 
# 
# pip install ftfy regex tqdm omegaconf pytorch-lightning imageio-ffmpeg einops kornia transformers taming-transformers git+https://github.com/openai/CLIP.git
# curl -C - -o vqgan_imagenet_f16_1024.yaml -L 'https://heibox.uni-heidelberg.de/d/8088892a516d4e3baf92/files/?p=%2Fconfigs%2Fmodel.yaml&dl=1' 
# curl -C - -o vqgan_imagenet_f16_1024.ckpt -L 'https://heibox.uni-heidelberg.de/d/8088892a516d4e3baf92/files/?p=%2Fckpts%2Flast.ckpt&dl=1'

#@title More, different setup { display-mode: "form" }
import math
import io
from pathlib import Path
import sys
import time

from IPython import display
from omegaconf import OmegaConf
from PIL import Image
import requests
from taming.models import cond_transformer, vqgan
import torch
from torch import nn, optim
from torch.nn import functional as F
from torchvision import transforms
from torchvision.transforms import functional as TF
from tqdm.notebook import tqdm, trange
import kornia.augmentation as K


import warnings
warnings.simplefilter("ignore") # Avoid spookin people for Cumin

from clip import clip
def sinc(x):
    return torch.where(x != 0, torch.sin(math.pi * x) / (math.pi * x), x.new_ones([]))


def lanczos(x, a):
    cond = torch.logical_and(-a < x, x < a)
    out = torch.where(cond, sinc(x) * sinc(x/a), x.new_zeros([]))
    return out / out.sum()


def ramp(ratio, width):
    n = math.ceil(width / ratio + 1)
    out = torch.empty([n])
    cur = 0
    for i in range(out.shape[0]):
        out[i] = cur
        cur += ratio
    return torch.cat([-out[1:].flip([0]), out])[1:-1]


def resample(input, size, align_corners=True):
    n, c, h, w = input.shape
    dh, dw = size

    input = input.view([n * c, 1, h, w])

    if dh < h:
        kernel_h = lanczos(ramp(dh / h, 2), 2).to(input.device, input.dtype)
        pad_h = (kernel_h.shape[0] - 1) // 2
        input = F.pad(input, (0, 0, pad_h, pad_h), 'reflect')
        input = F.conv2d(input, kernel_h[None, None, :, None])

    if dw < w:
        kernel_w = lanczos(ramp(dw / w, 2), 2).to(input.device, input.dtype)
        pad_w = (kernel_w.shape[0] - 1) // 2
        input = F.pad(input, (pad_w, pad_w, 0, 0), 'reflect')
        input = F.conv2d(input, kernel_w[None, None, None, :])

    input = input.view([n, c, h, w])
    return F.interpolate(input, size, mode='bicubic', align_corners=align_corners)

def vector_quantize(x, codebook):
    d = x.pow(2).sum(dim=-1, keepdim=True) + codebook.pow(2).sum(dim=1) - 2 * x @ codebook.T
    indices = d.argmin(-1)
    x_q = F.one_hot(indices, codebook.shape[0]).to(d.dtype) @ codebook
    return replace_grad(x_q, x)


class ReplaceGrad(torch.autograd.Function):
    @staticmethod
    def forward(ctx, x_forward, x_backward):
        ctx.shape = x_backward.shape
        return x_forward

    @staticmethod
    def backward(ctx, grad_in):
        return None, grad_in.sum_to_size(ctx.shape)


replace_grad = ReplaceGrad.apply


class ClampWithGrad(torch.autograd.Function):
    @staticmethod
    def forward(ctx, input, min, max):
        ctx.min = min
        ctx.max = max
        ctx.save_for_backward(input)
        return input.clamp(min, max)

    @staticmethod
    def backward(ctx, grad_in):
        input, = ctx.saved_tensors
        return grad_in * (grad_in * (input - input.clamp(ctx.min, ctx.max)) >= 0), None, None


clamp_with_grad = ClampWithGrad.apply


class Prompt(nn.Module):
    def __init__(self, embed, weight=1., stop=float('-inf')):
        super().__init__()
        self.register_buffer('embed', embed)
        self.register_buffer('weight', torch.as_tensor(weight))
        self.register_buffer('stop', torch.as_tensor(stop))

    def forward(self, input):
        input_normed = F.normalize(input.unsqueeze(1), dim=2)
        embed_normed = F.normalize(self.embed.unsqueeze(0), dim=2)
        dists = input_normed.sub(embed_normed).norm(dim=2).div(2).arcsin().pow(2).mul(2)
        dists = dists * self.weight.sign()
        return self.weight.abs() * replace_grad(dists, torch.maximum(dists, self.stop)).mean()


def fetch(url_or_path):
    if str(url_or_path).startswith('http://') or str(url_or_path).startswith('https://'):
        headers={"user-agent": "AIArtMachineBot/0.0 (https://is.gd/aiartmachine; h@hillelwayne.com) generic-library/0.0"}
        r = requests.get(url_or_path, headers=headers)
        r.raise_for_status()
        fd = io.BytesIO()
        fd.write(r.content)
        fd.seek(0)
        return fd
    return open(url_or_path, 'rb')


def parse_prompt(prompt):
    if prompt.startswith('http://') or prompt.startswith('https://'):
        vals = prompt.rsplit(':', 3)
        vals = [vals[0] + ':' + vals[1], *vals[2:]]
    else:
        vals = [prompt]
    vals = vals + ['', '1', '-inf'][len(vals):]
    return vals[0], float(vals[1]), float(vals[2])


def tv_loss(input):
    """L2 total variation loss, as in Mahendran et al."""
    input = F.pad(input, (0, 1, 0, 1), 'replicate')
    x_diff = input[..., :-1, 1:] - input[..., :-1, :-1]
    y_diff = input[..., 1:, :-1] - input[..., :-1, :-1]
    return (x_diff**2 + y_diff**2).mean()


class MakeCutoutsDefault(nn.Module):
    def __init__(self, cut_size, cutn, cut_pow=1.):
        super().__init__()
        self.cut_size = cut_size
        self.cutn = cutn
        self.cut_pow = cut_pow

    def forward(self, input):
        sideY, sideX = input.shape[2:4]
        max_size = min(sideX, sideY)
        min_size = min(sideX, sideY, self.cut_size)
        cutouts = []
        for _ in range(self.cutn):
            size = int(torch.rand([])**self.cut_pow * (max_size - min_size) + min_size)
            offsetx = torch.randint(0, sideX - size + 1, ())
            offsety = torch.randint(0, sideY - size + 1, ())
            cutout = input[:, :, offsety:offsety + size, offsetx:offsetx + size]
            cutouts.append(resample(cutout, (self.cut_size, self.cut_size)))
        return clamp_with_grad(torch.cat(cutouts, dim=0), 0, 1)

class MakeCutoutsCumin(nn.Module):
    """from https://colab.research.google.com/drive/1ZAus_gn2RhTZWzOWUpPERNC0Q8OhZRTZ"""
    def __init__(self, cut_size, cutn, cut_pow=1.):
        super().__init__()
        self.cut_size = cut_size
        self.cutn = cutn
        self.cut_pow = cut_pow

        self.augs = nn.Sequential(
            K.RandomAffine(degrees=15, translate=0.1, p=0.7, padding_mode='border'),
            K.RandomPerspective(0.7,p=0.7),
            K.ColorJitter(hue=0.1, saturation=0.1, p=0.7),
            K.RandomErasing((.1, .4), (.3, 1/.3), same_on_batch=True, p=0.7),
            
)
        self.noise_fac = 0.1
        self.av_pool = nn.AdaptiveAvgPool2d((self.cut_size, self.cut_size))
        self.max_pool = nn.AdaptiveMaxPool2d((self.cut_size, self.cut_size))

    def forward(self, input):
        sideY, sideX = input.shape[2:4]
        max_size = min(sideX, sideY)
        min_size = min(sideX, sideY, self.cut_size)
        cutouts = []
        
        for _ in range(self.cutn):
            cutout = (self.av_pool(input) + self.max_pool(input))/2
            cutouts.append(cutout)
        batch = self.augs(torch.cat(cutouts, dim=0))
        if self.noise_fac:
            facs = batch.new_empty([self.cutn, 1, 1, 1]).uniform_(0, self.noise_fac)
            batch = batch + facs * torch.randn_like(batch)
        return batch


def load_vqgan_model(config_path, checkpoint_path):
    config = OmegaConf.load(config_path)
    if config.model.target == 'taming.models.vqgan.VQModel':
        model = vqgan.VQModel(**config.model.params)
        model.eval().requires_grad_(False)
        model.init_from_ckpt(checkpoint_path)
    elif config.model.target == 'taming.models.cond_transformer.Net2NetTransformer':
        parent_model = cond_transformer.Net2NetTransformer(**config.model.params)
        parent_model.eval().requires_grad_(False)
        parent_model.init_from_ckpt(checkpoint_path)
        model = parent_model.first_stage_model
    else:
        raise ValueError(f'unknown model type: {config.model.target}')
    del model.encoder, model.loss
    return model


def resize_image(image, out_size):
    ratio = image.size[0] / image.size[1]
    area = min(image.size[0] * image.size[1], out_size[0] * out_size[1])
    size = round((area * ratio)**0.5), round((area / ratio)**0.5)
    return image.resize(size, Image.LANCZOS)
device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')

vqgan_config='vqgan_imagenet_f16_1024.yaml'
vqgan_checkpoint='vqgan_imagenet_f16_1024.ckpt'
model = load_vqgan_model(vqgan_config, vqgan_checkpoint).to(device)
perceptor = clip.load("ViT-B/32", jit=False)[0].eval().requires_grad_(False).to(device)

cut_size = perceptor.visual.input_resolution
e_dim = model.quantize.e_dim
f = 2**(model.decoder.num_resolutions - 1)
flavordict = {
    "default": MakeCutoutsDefault,
    "cumin": MakeCutoutsCumin,
    "rosewater": MakeCutoutsDefault,
    "oregano": MakeCutoutsDefault,
    "thyme": MakeCutoutsCumin,

}

def uses_zq():
  return flavor in {"oregano", "thyme"}

make_cutouts = flavordict[flavor](cut_size, args.cutn, cut_pow=args.cut_pow)
n_toks = model.quantize.n_e
toksX, toksY = image_size // f, image_size // f
sideX, sideY = toksX * f, toksY * f

if args.seed is not None:
    torch.manual_seed(args.seed)

"""
Oregano and Thyme are based on z+quantize, from
https://colab.research.google.com/drive/1wkF67ThUz37T2_oPIuSwuO4e_-0vjaLs
They use a completely different means of guiding VQGAN vs codebook sampling.
Best way to handle this rn is to branch on the logic. A smarter, less lazy
person would have instead made Task objects with injectable Flavor objects, but I am
neither smart nor less lazy.
"""

if uses_zq():
  oh = F.one_hot(torch.randint(n_toks, [toksX * toksY], device=device), n_toks).float()
  z = oh @ model.quantize.embedding.weight
  z = z.view([-1, toksY, toksX, e_dim]).permute(0, 3, 1, 2) 
  z = torch.rand_like(z)*2
  z.requires_grad_(True) #Does this slow down basic operations?

  opt = optim.AdamW([z], lr=args.step_size, weight_decay=args.weight_decay)
else:
  logits = torch.randn([toksY * toksX, n_toks], device=device, requires_grad=True)

  opt = optim.AdamW([logits], lr=args.step_size, weight_decay=args.weight_decay)

normalize = transforms.Normalize(mean=[0.48145466, 0.4578275, 0.40821073],
                                 std=[0.26862954, 0.26130258, 0.27577711])

pMs = []

from re import sub

# I hate using underscores for names, but this way is better for people using utf-8
p_filename = sub("\W", "", p.lower().replace(" ","_"))

### make the output path for dumping the images 
img_path = Path("img") / "grouped" / p_filename
all_path = Path("img/all")
img_path.mkdir(parents = True, exist_ok = True)
all_path.mkdir(parents = True, exist_ok = True)

for prompt in args.prompts:
    txt, weight, stop = parse_prompt(prompt)
    embed = perceptor.encode_text(clip.tokenize(txt).to(device)).float()
    pMs.append(Prompt(embed, weight, stop).to(device))

for prompt in args.image_prompts:
    path, weight, stop = parse_prompt(prompt)
    img = resize_image(Image.open(fetch(path)).convert('RGB'), (sideX, sideY))
    batch = make_cutouts(TF.to_tensor(img)[None].to(device))
    embed = perceptor.encode_image(normalize(batch)).float()
    pMs.append(Prompt(embed, weight, stop).to(device))

for seed, weight in zip(args.noise_prompt_seeds, args.noise_prompt_weights):
    gen = torch.Generator().manual_seed(seed)
    embed = torch.empty([1, perceptor.visual.output_dim]).normal_(generator=gen)
    pMs.append(Prompt(embed, weight).to(device))

def z_synth():
    z_q = vector_quantize(z.movedim(1, 3), model.quantize.embedding.weight).movedim(3, 1)
    return clamp_with_grad(model.decode(z_q).add(1).div(2), 0, 1)

def logit_synth(one_hot):
    z = one_hot @ model.quantize.embedding.weight
    z = z.view([-1, toksY, toksX, e_dim]).permute(0, 3, 1, 2)
    return clamp_with_grad(model.decode(z).add(1).div(2), 0, 1)

@torch.no_grad()
def checkin(i, losses):
    tqdm.write(f'iterations: {i}, prompt: {p}')
    if uses_zq():
      out = z_synth()
    else:
      one_hot = F.one_hot(logits.argmax(1), n_toks).to(logits.dtype)
      out = logit_synth(one_hot)
    out_img = TF.to_pil_image(out[0].cpu())
    out_img.save('progress.png')
    out_img.save(all_path / f"{p_filename}-{i:0=4}.png")
    out_img.save(img_path / f"{i:0=4}.png")

    display.display(display.Image('progress.png'))

def ascend_txt():
    opt.zero_grad(set_to_none=True)
    if uses_zq():
      out = z_synth()
    else:
      probs = logits.softmax(1)
      one_hot = F.one_hot(probs.multinomial(1)[..., 0], n_toks).to(logits.dtype)
      one_hot = replace_grad(one_hot, probs)
      out = logit_synth(one_hot)
    iii = perceptor.encode_image(normalize(make_cutouts(out))).float()

    result = []

    if args.tv_weight:
        result.append(tv_loss(out) * args.tv_weight / 4)

    for prompt in pMs:
        result.append(prompt(iii))

    return result

def train(i):
    opt.zero_grad(set_to_none=True)
    lossAll = ascend_txt()
    if i % args.display_freq == 0:
        checkin(i, lossAll)
    loss = sum(lossAll)
    loss.backward()
    opt.step()

"""# Output"""

#@title Images will appear here! { display-mode: "form" }

i = 1
print("NOTE: First image will look random. This is normal.")
try:
    with trange(args.total_iterations) as pbar:
        start = time.perf_counter()
        while i < args.total_iterations:
            pbar.update()
            train(i)
            if i == 10:
              end = time.perf_counter()
              print(f"It will take about {int((end - start) * args.total_iterations // (60 * 10))} minutes to complete all {args.total_iterations} iterations.")
            i += 1
except KeyboardInterrupt:
    pass
except RuntimeError:
    print("ERROR! ERROR! ERROR!")
    print("The image size you chose was too big!")
else:
  print("Final image.")
  checkin(i, 0)

print("All done!")

#@title Download images { display-mode: "form" }
#@markdown The button will appear *after* the generator finishes.
from google.colab import files
import ipywidgets as widgets
from shutil import make_archive

def download_prompt():
  make_archive(p_filename, "zip", base_dir = img_path)
  files.download(f"{p_filename}.zip")

if download_after_finishing:
  download_prompt()

def download_all(_):
  make_archive("all_images", "zip", base_dir = all_path)
  print("ZIP file made. If the download prompt doesn't appear, you can download it manually in the 'files' sidebar (left of screen, fourth icon)")
  files.download('all_images.zip')

button = widgets.Button(
    description='Download All',
    disabled=False,
    button_style='success', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Click me',
    icon='check' # (FontAwesome names without the `fa-` prefix)
)
button.on_click(download_all)
button

#@title Make a Video! {  run: "auto", display-mode: "form" }
#@markdown The button will appear *after* the generator finishes.
# Taken from https://colab.research.google.com/drive/1ZAus_gn2RhTZWzOWUpPERNC0Q8OhZRTZ
import numpy as np
from subprocess import Popen, PIPE
from base64 import b64encode

video_length_in_seconds =  5#@param {type:"integer"}
display.clear_output()

def download_video(_):
  print("If the download prompt doesn't appear, you can download the video manually in the 'files' sidebar (left of screen, fourth icon)")
  files.download(f"{p_filename}.mp4")

def make_video(_):
  min_fps = 10
  max_fps = 60

  length = video_length_in_seconds #Desired time of the video in seconds

  frames = []
  print('Generating video...')
  for snapshot in sorted(img_path.iterdir()): #
      frames += [Image.open(snapshot)]*1 # Make things a wee bit smoother

  fps = np.clip(len(frames)/length,min_fps,max_fps)

  p = Popen(['ffmpeg', '-y', '-f', 'image2pipe', '-vcodec', 'png', '-r', str(fps), '-i', '-', '-vcodec', 'libx264', '-r', str(fps), '-pix_fmt', 'yuv420p', '-crf', '17', '-preset', 'veryslow', f'{p_filename}.mp4'], stdin=PIPE)
  for im in tqdm(frames):
      im.save(p.stdin, 'PNG')
  p.stdin.close()
  p.wait()
  print('Attaching video...')
  mp4 = open(f'{p_filename}.mp4','rb').read()
  data_url = "data:video/mp4;base64," + b64encode(mp4).decode()
  display.display(display.HTML("""
<video width={} controls>
      <source src="{}" type="video/mp4">
</video>
""".format(image_size, data_url)))

  download_video_button = widgets.Button(
    description='Download Video',
    disabled=False,
    button_style='success', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Click me',
    icon='check' # (FontAwesome names without the `fa-` prefix)
  )
  download_video_button.on_click(download_video)
  display.display(download_video_button)


video_button = widgets.Button(
    description='Make a video',
    disabled=False,
    button_style='success', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Click me',
    icon='check' # (FontAwesome names without the `fa-` prefix)
)


video_button.on_click(make_video)
video_button

"""# Learn More!

If this interested you and you want to learn more about AI art, here are some links!

### Resources

* [Alien Dreams: An Emerging Art Scene](https://ml.berkeley.edu/blog/posts/clip-art/): first "mainstream" introduction to AI Art.
* [The Illustrated VQGAN](https://ljvmiranda921.github.io/notebook/2021/08/08/clip-vqgan/): The neural network generating images is VQGAN. This is a description of how it works! Fairly technical.

### Notebooks

There's other notebooks you can try, too! Some of them use different styles, or give you different features to play with.

* [Create Realistic AI-Generated Images](https://colab.research.google.com/drive/1wkF67ThUz37T2_oPIuSwuO4e_-0vjaLs): Also designed for beginners, this one lets you pick a starting initial image to work from.

* [VQGAN+CLIP](https://colab.research.google.com/drive/1_4Jl0a7WIJeqy5LTjPJfZOwMZopG5C-W): The first notebook to use VQGAN, which is now the most popular AI generator to use. Mostly reimplemented as the herb flavors.
* [Semantic Style Transfer](https://colab.research.google.com/drive/17AqhaKLZmmUA27aNSc6fJYMR9uypeIci?usp=sharing): Can do "style transfers", where you make one image stylized like another image.
* [The Big Sleep](https://colab.research.google.com/drive/1NCceX2mbiKOSlAd_o7IU7nA9UskKN5WR). The very first CLIP-based notebook, starting the whole trend. Uses a different image generator and gives very different pictures.
* [CLIP-Guided Diffusion](https://colab.research.google.com/drive/12a_Wrfi2_gwwAuN3VvMTwVMz9TfqctNj): One of the newest innovations in CLIP tech. Uses a different image generator.
* [CLIPIT PixelDraw](https://colab.research.google.com/github/dribnet/clipit/blob/master/demos/PixelDrawer.ipynb): AI-generated pixel art!

### Communities

* [/r/deepdream](https://www.reddit.com/r/deepdream/): A subreddit where people post their AI art. Some really hardcore artists in here producing amazing stuff.
* [EleutherAI](https://www.eleuther.ai/): A "grassroots collective" of AI researchers. To my understanding there's a lot of AI artists in their discord, but I haven't checked this myself.

"""
